#!/bin/sh
#/var/log/upstart/pkgctl-AirConnect.log
AIRCONNECT_USER="$(echo "${SYNOPKG_PKGNAME}" | awk '{print tolower($_)}')"
CONFIG_UPNP_FILE="${SYNOPKG_PKGDEST}/config.xml"
CONFIG_CAST_FILE="${SYNOPKG_PKGDEST}/config-cast.xml"
AIRCAST_SELECTION="${pkgwizard_binaries_aircast}"
AIRUPNP_SELECTION="${pkgwizard_binaries_airupnp}"
AIRCAST_ENABLED="${SYNOPKG_PKGDEST}/aircast_enabled"
AIRUPNP_ENABLED="${SYNOPKG_PKGDEST}/airupnp_enabled"
FILTER_AIRPLAY2_DEVICES="<NULL>,S1,S3,S5,S9,S12,ZP80,ZP90,S15,ZP100,ZP120,1.0,LibreWireless"

LOG="/var/log/${AIRCONNECT_USER}.log"
# Delete Log if size reached 10MB
find "${LOG}" -size +10M -type f -delete >/dev/null 2>&1
# Ensure user 'airconnect' exists before doing anything
if ! synouser --get "${AIRCONNECT_USER}" >/dev/null 2>&1; then
    # create user with random password
    echo "[$(date +'%T')] start-stop-status - Creating \"${AIRCONNECT_USER}\" user." >>"$LOG"
    synouser --add "${AIRCONNECT_USER}" "$(uuidgen | cut -c-8)" 'AirConnect User' 0 '' ''
fi
if [ -e "${LOG}" ]; then
    chown "${AIRCONNECT_USER}":users "${LOG}"
else
    touch "${LOG}"
    chown "${AIRCONNECT_USER}":users "${LOG}"
fi

start_airconnect_on_ip() {
    ip="$1"
    port=49154
    if [ -n "${port}" ]; then
        if netstat -tlpn | grep :${port}; then
            echo "[$(date +'%T')] Your selected port ${port} is already in use." >>"$LOG"
            echo "[$(date +'%T')] Please check what is running on the port and try again." >>"$LOG"
            echo "[$(date +'%T')] Port ${port} already in use. Please check what is running on the port and try again." >>"$SYNOPKG_TEMP_LOGFILE"
            return 1
        fi
    fi
    echo "[$(date +'%T')] Starting airupnp on ${ip}:${port}" >>"$LOG"
    su airconnect -s /bin/sh -c "${SYNOPKG_PKGDEST}/airupnp -b ${ip}:${port} -l 1000:2000 -x \"${CONFIG_UPNP_FILE}\" -o \"${FILTER_AIRPLAY2_DEVICES}\" -z -f \"${LOG}\" -d all=info" >>"${LOG}" 2>&1
    echo "[$(date +'%T')] Starting aircast on ${ip}" >>"$LOG"
    su airconnect -s /bin/sh -c "${SYNOPKG_PKGDEST}/aircast -b ${ip} -l 1000:2000 -x \"${CONFIG_CAST_FILE}\" -z -f \"${LOG}\" -d all=info" >>"${LOG}" 2>&1

    # search for 10 seconds "adding renderer" in the logfile to check if speakers are found, if not return 1 rom the function
    #cnt=0
    #echo "[$(date +'%T')] Searching if renderer were added (for 10 seconds)..." >>"$LOG"
    #while [ $cnt -lt 10 ]; do
    #    if grep -q "adding renderer" "${LOG}"; then
    #        echo "[$(date +'%T')] At least one renderer successfully discovered!" >>"$LOG"
    #        return 0
    #    fi
    #    cnt=$((cnt + 1))
    #    sleep 1
    #done
    #return 1
    return 0
}

start_airconnect() {
    # If you want to start the airconnect processes on a specific IP please uncomment the following lines
    # and set your own local IP address:
    #
    # start_airconnect_on_ip "1.2.3.4" || true
    # return 0

    interfaces=$(/sbin/ifconfig -a | grep 'Ethernet' -A 1 | grep -E 'inet (addr:)?(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.|17\.0\.(6[4-9]|[7-9][0-9]|1([0-1][0-9]|2[0-7]))\.)' -B 1 | grep 'Ethernet' | grep -v "lbr0" | grep -v "docker" | cut -d ' ' -f 1)
    if [ -z "$interfaces" ]; then
        echo "[$(date +'%T')] Failed to get local Ethernet interfaces" >>"$LOG"
        echo "[$(date +'%T')] Failed to get local Ethernet interfaces" >>"$SYNOPKG_TEMP_LOGFILE"
        return 1
    fi

    # Try lbr0 interface first if exists
    interfaces="lbr0 $interfaces"

    for interface in $interfaces; do
        ip=$(/sbin/ifconfig "$interface" 2>/dev/null | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')
        if [ -n "$ip" ]; then
            if start_airconnect_on_ip "$ip"; then
                echo "[$(date +'%T')] AirConnect successfully started on ip \"${ip}\"!" >>"$LOG"
                return 0
            else
                echo "[$(date +'%T')] Failed to start AirConnect on ip \"${ip}\", stopping it..." >>"$LOG"
                echo "[$(date +'%T')] Failed to start AirConnect on ip \"${ip}\", stopping it..." >>"$SYNOPKG_TEMP_LOGFILE"
                stop_airconnect
            fi
        fi
    done
    echo "[$(date +'%T')] Failed to start AirConnect on any of the local interfaces, please make sure you have at least one UPnP/Sonos/Chromecast device on your network" >>"$LOG"
    echo "[$(date +'%T')] Failed to start AirConnect on any of the local interfaces, please make sure you have at least one UPnP/Sonos/Chromecast device on your network" >>"$SYNOPKG_TEMP_LOGFILE"
    return 1
}

stop_airconnect() {
    killall -16 airupnp >/dev/null 2>&1
    sleep 1
    killall -16 aircast >/dev/null 2>&1
    sleep 10

    # Check if ps has ax options
    if ps ax >/dev/null 2>&1; then
        # shellcheck disable=SC2009
        if ! ps ax | grep -E 'airupnp' | grep -v -q grep && ! ps ax | grep -E 'aircast' | grep -v -q grep; then
            return 0
        elif ps ax | grep -E 'airupnp' | grep -v -q grep && ps ax | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Stop: airupnp & aircast are still running!" >>"$LOG"
            return 1
        elif ! ps ax | grep -E 'airupnp' | grep -v -q grep && ps ax | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Stop: aircast is still running!" >>"$LOG"
            return 1
        elif ps ax | grep -E 'airupnp' | grep -v -q grep && ! ps ax | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Stop: airupnp is still running!" >>"$LOG"
            return 1
        fi
    else
        # shellcheck disable=SC2009
        if ! ps | grep -E 'airupnp' | grep -v -q grep && ! ps | grep -E 'aircast' | grep -v -q grep; then
            return 0
        elif ps | grep -E 'airupnp' | grep -v -q grep && ps | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Stop: airupnp & aircast are still running!" >>"$LOG"
            return 1
        elif ! ps | grep -E 'airupnp' | grep -v -q grep && ps | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Stop: aircast is still running!" >>"$LOG"
            return 1
        elif ps | grep -E 'airupnp' | grep -v -q grep && ! ps | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Stop: airupnp is still running!" >>"$LOG"
            return 1
        fi
    fi
    return 1
}

airconnect_status() {
    # Check if ps has ax options
    if ps ax >/dev/null 2>&1; then
        # shellcheck disable=SC2009
        if ps ax | grep -E 'airupnp' | grep -v -q grep && ps ax | grep -E 'aircast' | grep -v -q grep; then
            return 0
        elif ! ps ax | grep -E 'airupnp' | grep -v -q grep && ! ps ax | grep -E 'aircast' | grep -v -q grep; then
            return 3
        elif ! ps ax | grep -E 'airupnp' | grep -v -q grep && ps ax | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Status: airupnp not running!" >>"$LOG"
            return 3
        elif ps ax | grep -E 'airupnp' | grep -v -q grep && ! ps ax | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Status: aircast not running!" >>"$LOG"
            return 3
        else
            return 4
        fi
    else
        # shellcheck disable=SC2009
        if ps | grep -E 'airupnp' | grep -v -q grep && ps | grep -E 'aircast' | grep -v -q grep; then
            return 0
        elif ! ps | grep -E 'airupnp' | grep -v -q grep && ! ps | grep -E 'aircast' | grep -v -q grep; then
            return 3
        elif ! ps | grep -E 'airupnp' | grep -v -q grep && ps | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Status: airupnp not running!" >>"$LOG"
            return 3
        elif ps | grep -E 'airupnp' | grep -v -q grep && ! ps | grep -E 'aircast' | grep -v -q grep; then
            echo "[$(date +'%T')] Status: aircast not running!" >>"$LOG"
            return 3
        else
            return 4
        fi
    fi
    # return unknown if nothing matched
    return 4
}

case $1 in
start)
    echo "[$(date +'%T')] Starting AirConnect ..." >>"$LOG"
    start_airconnect
    exit $?
    ;;
stop)
    echo "[$(date +'%T')] Stopping AirConnect ..." >>"$LOG"
    stop_airconnect
    exit $?
    ;;
status)
    if airconnect_status; then
        echo "[$(date +'%T')] AirConnect is running"
        exit 0
    else
        echo "[$(date +'%T')] AirConnect is not running"
        exit 3
    fi
    ;;
log)
    echo "${LOG}"
    exit 0
    ;;
*)
    exit 1
    ;;
esac
